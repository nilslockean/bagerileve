---
import type { NavLink } from "@lib/types/NavLink";
// import Hamburger from '$lib/components/Hamburger.svelte';
// import Cross from '$lib/components/Cross.svelte';
import NavLinks from "./NavLinks.astro";
// import { slide } from 'svelte/transition';
// import { onNavigate } from '$app/navigation';

// const _ANIMATION_DURATION = 200;
// let isMobileNavVisible = false;
// function _handleButtonClick() {
// 	isMobileNavVisible = !isMobileNavVisible;
// }

// onNavigate(() => {
// 	isMobileNavVisible = false;
// });
type Props = {
	links: NavLink[];
};

const { links } = Astro.props;
---

<nav
  class="flex lg:text-lg gap-x-3 gap-y-1 flex-wrap justify-end"
  id="main-nav"
>
  <NavLinks {links} />
</nav>

<!-- 
<nav class="hidden md:flex text-lg gap-3" id="main-nav">
	<NavLinks {links} className="no-underline aria-current:underline" />
</nav>

{#if !isMobileNavVisible}
	<button
		class="md:hidden p-4"
		aria-expanded={isMobileNavVisible}
		aria-controls="mobile-nav"
		on:click={_handleButtonClick}
		out:slide={{ axis: 'x', duration: _ANIMATION_DURATION }}
		in:slide={{ axis: 'x', duration: _ANIMATION_DURATION, delay: _ANIMATION_DURATION }}
	>
		<Hamburger />
	</button>
{/if}

{#if isMobileNavVisible}
	<div
		class="bg-orange-100 dark:bg-blue-900 shadow-2xl fixed top-0 right-0 h-screen w-80 flex flex-col p-4 items-end z-10"
		id="mobile-nav"
		in:slide={{ axis: 'x', duration: _ANIMATION_DURATION }}
		out:slide={{ axis: 'x', duration: _ANIMATION_DURATION }}
	>
		<button
			aria-expanded={isMobileNavVisible}
			aria-controls="mobile-nav"
			class="p-4"
			on:click={_handleButtonClick}
			out:slide={{ axis: 'x', duration: _ANIMATION_DURATION }}
		>
			<Cross />
		</button>
		<nav class="grow flex flex-col items-end justify-center text-3xl gap-3">
			<NavLinks {links} className="no-underline aria-current:underline" />
		</nav>
	</div>
{/if} -->
